// ###############################################################################################
// @file    AppDataType.h
// @author
// @version V1.0.0
// @date
// @brief   This file contains implementations for gpio_driver
// ###############################################################################################
#ifndef APPDATATYPE_H_
#define APPDATATYPE_H_

// **************************************************************************************
// Includes
// **************************************************************************************
#include <stdbool.h>
// **************************************************************************************
// Defines
// **************************************************************************************

// **************************************************************************************
// Enums
// **************************************************************************************

// **************************************************************************************
// Typedefs
// **************************************************************************************
/////////////////////////////////////////////////////////////////
typedef unsigned long long  uint64_ta;
typedef   signed long long  int64_ta;

typedef unsigned long   uint32_ta;
typedef signed   long   int32_ta;

typedef unsigned int    uint16_ta;
typedef signed   int    int16_ta;

typedef unsigned char   uint8_ta;
typedef signed   char   int8_ta;

typedef char            char_ta;

typedef unsigned char   byte_ta;
typedef unsigned int    word_ta;

typedef unsigned char   bool_ta;

typedef float           f32_ta;
typedef double          f64_ta;



//// **************************************************************************************
//// Structs
//// **************************************************************************************

//// **************************************************************************************
//// Unions
//// **************************************************************************************
// --> Generic data-type 64bit
typedef union
{
    uint16_ta   u16t_ta[4];
    uint32_ta   u32t_ta[2];

    int16_ta    s16t_ta[4];
    int32_ta    s32t_ta[2];

    f32_ta      f32t_ta[2];
    f64_ta      f64t_ta;
}uVALUE_64bit;
// ######################################################################################
// --> Generic data-type 32bit
typedef union
{
    uint16_ta   u16t_ta[2];
    uint32_ta   u32t_ta;

    int16_ta    s16t_ta[2];
    int32_ta    s32t_ta;

    f32_ta      f32t_ta;
}uVALUE_32bit;

// ######################################################################################
typedef union
{
    uint16_ta    u16t_ta;
    int16_ta     s16t_ta;
}uVALUE_16bit;
// ######################################################################################


// ######################################################################################
typedef enum
{
    OFF     = 0,
    ON      = 1
}ON_STATE;

// ######################################################################################


// ######################################################################################

// **************************************************************************************
// Defines
// **************************************************************************************
// --> Ranges for numeric typedefs
#define U16_MAX    ((uint16_ta)65535u)
#define S16_MAX    ((int16_ta)32767)
#define S16_MIN    ((int16_ta)-32768)
#define U32_MAX    ((uint32_ta)4294967295uL)
#define S32_MAX    ((int32_ta)2147483647)
#define S32_MIN    ((int32_ta)-2147483648)
#define U64_MAX    ((uint64_ta)18446744073709551615)
#define S64_MAX    ((int64_ta)9223372036854775807)
#define S64_MIN    ((int64_ta)-9223372036854775808)

// --> Bit manipulation macros
#define _mSET_BIT(integer, bit)               integer |= (1 << bit) // For now we cannot compile "typeof" but if so then the macro can be changed as follows : integer |= (typeof(integer))(1 << bit)
#define _mCLEAR_BIT(integer, bit)             integer &= ~(1 << bit) // For now we cannot compile "typeof" but if so then the macro can be changed as follows : integer &= ~((typeof(integer))(1 << bit))

// **************************************************************************************
// Global variables
// **************************************************************************************
#define mNULL_ta (0)
// **************************************************************************************
// Functions prototypes
// **************************************************************************************

// **************************************************************************************
// Inline functions
// **************************************************************************************




#endif /* APPDATATYPE_H_ */
